# Build and Object Folders
bin/
obj/

#User Specific Files
*.user
*.suo

## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.



Public Class MainForm

    Const Max As Integer = 30
    Const Zero As String = "0000000000000000000000000000000"
    Const One As String = "0000000000000000000000000000001"
    Private Big1(Max), Big2(Max), Result(Max) As Integer

    Private Function BigEqual(ByVal Big1Str As String, ByVal Big2Str As String) As Boolean
        Return (Big1Str = Big2Str)

    End Function

    Private Function BigLessthan(ByVal Big1Str As String, ByVal Big2Str As String) As Boolean
        Return (Big1Str < Big2Str)
    End Function


    Private Sub BigAdd(ByVal Big1Str As String, ByVal Big2Str As String, ByRef SumStr As String)
        Dim X, Carry As Integer

        For X = 1 To Max
            Integer.TryParse(Big1Str.Substring(X, 1), Big1(X))
            Integer.TryParse(Big2Str.Substring(X, 1), Big2(X))
        Next X

        For X = Max To 1 Step -1
            Result(X) = Big1(X) + Big2(X) + Carry
            If Result(X) > 9 Then
                Carry = 1
                Result(X) = Result(X) - 10
            Else
                Carry = 0
            End If
        Next X
        For X = 0 To Max
            SumStr = SumStr & Result(X).ToString
        Next X



    End Sub


    Private Sub BigSub(ByVal Big1Str As String, ByVal Big2Str As String, ByRef DiffStr As String)

        Dim X, Borrow As Integer

        For X = 1 To Max
            Integer.TryParse(Big1Str.Substring(X, 1), Big1(X))
            Integer.TryParse(Big2Str.Substring(X, 1), Big2(X))
        Next X

        For X = Max To 0 Step -1
            Result(X) = Big1(X) - Big2(X) - Borrow
            If Result(X) < 0 Then
                Borrow = 1
                Result(X) = Result(X) + 10
            Else
                Borrow = 0
            End If
        Next X
        For X = 0 To Max
            DiffStr = DiffStr & Result(X).ToString
        Next X

    End Sub

    Private Sub BigMult(ByVal Big1Str As String, ByVal Big2Str As String, ByRef Product As String)
        'Repeated Addition
        Dim Counter As String

        Counter = Zero
        Product = Zero

        Do
            Call BigAdd(Product, Big1Str, Product)
            Call BigAdd(Counter, One, Counter)
        Loop Until (BigEqual(Counter, Big2Str))

    End Sub

    Private Sub BigDiv(ByVal Big1Str As String, ByVal Big2Str As String, ByRef Quotient As String)
        'Repeated Subtraction
        Dim Counter As String

        Counter = Zero
        Quotient = Zero
        Do
            Call BigSub(Quotient, Big1Str, Quotient)
            Call BigSub(Counter, One, Counter)
        Loop Until (BigEqual(Counter, Big2Str))

    End Sub

    Private Sub BigMod(ByVal Big1Str As String, ByVal Big2Str As String, ByRef Remainder As String)














    End Sub

    Private Sub BigPower(ByVal Base As String, ByVal Power As String, ByRef Value As String)
        'Repeated Multiplication












    End Sub

    Private Sub Compute_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Compute.Click

        ResultText.Text = String.Empty
        Select Case OpText.Text
            Case "+"
                Call BigAdd(Big1Text.Text, Big2Text.Text, ResultText.Text)
            Case "-"
                Call BigSub(Big1Text.Text, Big2Text.Text, ResultText.Text)
            Case "*"
                Call BigMult(Big1Text.Text, Big2Text.Text, ResultText.Text)
            Case "\"
                Call BigDiv(Big1Text.Text, Big2Text.Text, ResultText.Text)
            Case "r"
                Call BigMod(Big1Text.Text, Big2Text.Text, ResultText.Text)
            Case "^"
                Call BigPower(Big1Text.Text, Big2Text.Text, ResultText.Text)
        End Select

    End Sub

    Private Sub ClearResult_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ClearResult.Click
        ResultText.Text = String.Empty
    End Sub

    Private Sub LeadingZero1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LeadingZero1.Click
        Dim X, NumZeroes As Integer

        Integer.TryParse(InputBox("How many zeroes?"), NumZeroes)
        Big1Text.Text = String.Empty
        For X = 1 To NumZeroes
            Big1Text.Text = Big1Text.Text & "0"
        Next X

    End Sub

    Private Sub LeadingZero2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LeadingZero2.Click
        Dim X, NumZeroes As Integer

        Integer.TryParse(InputBox("How many zeroes?"), NumZeroes)
        Big2Text.Text = String.Empty
        For X = 1 To NumZeroes
            Big2Text.Text = Big2Text.Text & "0"
        Next X

    End Sub
End Class


# User-specific files
*.suo
*.user
*.sln.docstates

# Build results
[Dd]ebug/
[Rr]elease/
x64/
*_i.c
*_p.c
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.log
*.vspscc
*.vssscc
.builds

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opensdf
*.sdf

# Visual Studio profiler
*.psess
*.vsp
*.vspx

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*

# NCrunch
*.ncrunch*
.*crunch*.local.xml

# Installshield output folder 
[Ee]xpress

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish

# Publish Web Output
*.Publish.xml

# Others
[Bb]in
[Oo]bj
sql
TestResults
[Tt]est[Rr]esult*
*.Cache
ClientBin
[Ss]tyle[Cc]op.*
~$*
*.dbmdl
Generated_Code #added for RIA/Silverlight projects

# Backup & report files from converting an old project file to a newer
# Visual Studio version. Backup files are not needed, because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML